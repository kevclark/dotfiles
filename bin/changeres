#!/usr/bin/env python3

# Usable resolutions of the 13" XPS laptop - all giving a x/y ratio of 1.6
# 3456x2160
# 2560x1600
# 1920x1200 (prefferd res)
# 1600x1024
# 1440x900
# 1280x800

import subprocess as sp
import argparse
import time
import math
import sys

parser = argparse.ArgumentParser()
parser.add_argument('--preset', action='store_true', help='preset - \
        Set to preferred resolution')
parser.add_argument('--get-preset', action='store_true', help='get-preset - \
        Display preferred resolution')
parser.add_argument('--list', action='store_true', help='list - List support \
        resolutions')
parser.add_argument('--inc', action='store_true', help='inc - Increase \
        resolution within supported range')
parser.add_argument('--dec', action='store_true', help='dec - Decrease \
        resolution within supported range')
parser.add_argument('--secondary', action='store_true', help='Target \
        secondary screen')
args = parser.parse_args()

# Connected screen resolutions and scaling
xtoyscale = 0
res = []


# Helper functions
def getsupported(screen, xrand):
    maxnumofres = 5
    laptopxtoy = 1.6
    hdmixtoy = 1.78
    global xtoyscale
    global res

    if 'eDP' in screen:
        xtoyscale = laptopxtoy
    else:
        xtoyscale = hdmixtoy
    for idx, line in enumerate(xrand):
        words = line.split()
        if any(screen == word for word in words):
            num = 0
            for r in xrand[idx+1::]:
                if r:
                    resolution = r.split()[0]
                    try:
                        x, y = resolution.split('x')
                        scale = float(x) / float(y)
                        if math.isclose(scale, xtoyscale, abs_tol=0.01):
                            num = num + 1
                            res.append(r.split()[0])
                        if num == maxnumofres:
                            return
                    except ValueError:
                        # Skip any resolutions that are interlaces, ie
                        # 1920x1080i
                        pass


def getpreferred(screen):
    resolution = ''
    if 'eDP' in screen:
        for r in res:
            if '1920' in r:
                resolution = r
                break
    else:
        resolution = res[0]

    return resolution


def setres(screen, resolution):
    try:
        if(screen == primaryscreen) and ('UNKNOWN' != secondaryscreen):
            # Set secondary screen to left had side of primary screen
            setrescmd = ['xrandr', '--output', screen, '--right-of',
                         secondaryscreen, '--mode', resolution]
        else:
            setrescmd = ['xrandr', '--output', screen, '--mode', resolution]

        sp.run(setrescmd, check=True)
        # Background image gets reset after changing the resolution
        # An exception can occur when attemping to set the background image
        # too soon afte rchanging the resolution of the screen
        time.sleep(0.5)
        sp.run(['nitrogen', '--restore'], check=True)
    except Exception as e:
        print('Failed to set resolution: {}'.format(e))
        sys.exit(-1)


# Main entry point
currentscreen = 'UNKNOWN'
primaryscreen = 'UNKNOWN'
secondaryscreen = 'UNKNOWN'
isSecondary = False
xrandroutput = sp.run('xrandr', check=True, stdout=sp.PIPE,
                      universal_newlines=True).stdout.split('\n')

for line in xrandroutput:
    if ' connected' in line:
        if 'primary' in line:
            primaryscreen = line.split()[0]
        else:
            secondaryscreen = line.split()[0]

currentres = -1
for line in xrandroutput:
    if ' connected' in line:
        if 'primary' in line:
            isSecondary = False
        else:
            isSecondary = True
        currentscreen = line.split()[0]
        if ((not isSecondary and not args.secondary) or
                (isSecondary and args.secondary)):
            getsupported(currentscreen, xrandroutput)
            # Now see if the resolution is supported
            for idx, r in enumerate(res):
                if r in line:
                    currentres = idx
                    break
            if currentres >= 0:
                break

if currentscreen != 'UNKNOWN':
    if (args.list):
        print('Screen is {}'.format('Secondary' if isSecondary else 'Primary'))
        for r in res:
            print('{}\tx/y: {}'.format(r, xtoyscale))
        sys.exit()

    if (args.get_preset):
        print('{}: Preferred res is {}'.format(currentscreen,
              getpreferred(currentscreen)))
        sys.exit()

    if currentres >= 0:
        print('{}: Current res is {}'.format(currentscreen, res[currentres]))
    else:
        print('res not set')

    if (args.preset):
        print('{}: Setting preset ( {} )'.format(currentscreen,
              getpreferred(currentscreen)))
        setres(currentscreen, getpreferred(currentscreen))

    if (args.inc):
        newIdx = (currentres - 1) % len(res)
        print('{}: Setting res ( {} )'.format(currentscreen, res[newIdx]))
        setres(currentscreen, res[newIdx])

    if (args.dec):
        newIdx = (currentres + 1) % len(res)
        print('{}: Setting res ( {} )'.format(currentscreen, res[newIdx]))
        setres(currentscreen, res[newIdx])
else:
    print('Monitor is not connected')
